# 비파괴적 연산
피연산자를 바꾸지 않는 연산
+, -, *, /, %, //, **은 비파괴적 연산자
format(), split(), upper(), lower(), isOO() 함수 등도 비파괴적

# 파괴적 연산
피연산자를 바꾸는 연산
=(할당 연산)은 파괴적 연산자

# upper()함수 / a는 문자열
대문자로 변경
a.upper()

#lower()함수
소문자로 변경
a.lower()

# strip()함수 / a는 문자열
공백을 제거
a.strip()
* lstrip()은 왼쪽 공백만 제거
  rstrip()은 오른쪽 공백만 제거

# isOO() 함수
OO에 들어가는 것들의 속성에 따라 True, False의 값을 나타냄

# find()와 rfind() 함수
find()는 왼쪽부터, rfind()는 오른쪽부터 탐색함(첫 번째로 만나는 것)
a = "abcdabcd"

a.find("b") => 1
a.rfind("b") => 5

없는 것을 찾으면 -1을 출력함

# in 연산자
"안녕" in "안녕하세요" => True

# format() 함수 고급

## 정수 / 소수
"{:d}".format() => 정수
"{:f}".format() => 소수

## 특정 칸만큼 출력
"{:5d}".format() => 앞에 다섯 칸만큼 잡고 출력

## 특정 칸만큼 + 0으로 채워서 출력
"{:5d}".format() => 앞에 다섯 칸만큼 잡고 0으로 채워서 출력

## 부호
"{:=5d}".format() => 부호를 맨 앞으로 보내고 + 다섯 칸만큼 잡고 0으로 채워서 출력
"{:=+5d}".format() => +를 나타냄

## 소수점 자릿수 지정
"{:.1f}".format() => 소수점 한 자리까지 나타냄(숫자에 따라 나타내는 자릿수 변경, 반올림도 함)
