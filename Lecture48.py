# (시간)복잡도
## 덧셈 횟수: 1번
x + 1
x = 10
print(x + 1)

## 리스트 내부에 있는 요소를 더하는 프로그램
## 덧셈 횟수: n번(리스트 요소 개수)
A = [1, 2, 3]
output = 0
for a in A:
    output += A
print(output)

## 2차원 배열의 요소를 더하는 프로그램
## 덧셈 횟수: n^2번
A = [
    [1, 2],
    [3, 4]
]
output = 0
for 리스트 in A:
    for i in 리스트:
        output += i

# "숫자가 증가하는 비율에 영향을 주는 것"은 "최고차 항 뿐이다"
## 점근표기법(빅오 표기법, 란다우 표기법)
 - 최고차 항만 남기고, 최고차 항의 계수를 제거하면
 EX) 10n^2 + n => O(n^2)
     n^2 + 1 => O(n^2)
     5n => O(n)
     

# 복잡도를 알아야 하는 이유
## 프론티어(미국의 슈퍼컴퓨터)
-> 1.12엑사 플롭 급
  = 1초에 112경 번의 부동소수점 연산

1경 = 10^16
10경 = 10^17
100경 = 10^18

만약 O(n!)이라면
 n = 32 => 2.63 * 10^35

 #컴퓨터(Compute + er)
 안티키테라, 파스칼 계산기, 라이프니츠 계산기, 찰스 베비지 컴퓨터,
 에이다 러브에이스(프로그래머), 독일의 Z1, Z2, Z3(프랑카큐리),
 영국의 콜로서스